<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\13-PID.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\13-PID.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Apr 01 00:16:00 2019
<BR><P>
<H3>Maximum Stack Usage =        228 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; rxSerial3TestInit &rArr; openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[26]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream0_IRQHandler</a> from dma_stm32f4xx.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream1_IRQHandler</a> from dma_stm32f4xx.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream2_IRQHandler</a> from dma_stm32f4xx.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream3_IRQHandler</a> from dma_stm32f4xx.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream4_IRQHandler</a> from dma_stm32f4xx.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream5_IRQHandler</a> from dma_stm32f4xx.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream6_IRQHandler</a> from dma_stm32f4xx.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream7_IRQHandler</a> from dma_stm32f4xx.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream0_IRQHandler</a> from dma_stm32f4xx.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream1_IRQHandler</a> from dma_stm32f4xx.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream2_IRQHandler</a> from dma_stm32f4xx.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream3_IRQHandler</a> from dma_stm32f4xx.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream4_IRQHandler</a> from dma_stm32f4xx.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream5_IRQHandler</a> from dma_stm32f4xx.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream6_IRQHandler</a> from dma_stm32f4xx.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream7_IRQHandler</a> from dma_stm32f4xx.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from exti.o(i.EXTI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from exti.o(i.EXTI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from exti.o(i.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from system.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[16]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from timer.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from serial_uart_stm32f4xx.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">USART6_IRQHandler</a> from serial_uart_stm32f4xx.o(i.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[68]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[67]">fputc</a> from main.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[6e]">isUartTransmitBufferEmpty</a> from serial_uart.o(i.isUartTransmitBufferEmpty) referenced from serial_uart.o(.constdata)
 <LI><a href="#[6]">taskIMUUpdateAttitude</a> from imu.o(i.taskIMUUpdateAttitude) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[8]">taskLeftMotorCurrentMeter</a> from fc_tasks.o(i.taskLeftMotorCurrentMeter) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[7]">taskMotorEncoder</a> from fc_tasks.o(i.taskMotorEncoder) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[9]">taskRightMotorCurrentMeter</a> from fc_tasks.o(i.taskRightMotorCurrentMeter) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[3]">taskSystem</a> from scheduler.o(i.taskSystem) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[5]">taskUpdateAccelerometer</a> from fc_tasks.o(i.taskUpdateAccelerometer) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[4]">taskUpdateGyro</a> from fc_tasks.o(i.taskUpdateGyro) referenced 2 times from fc_tasks.o(.data)
 <LI><a href="#[6c]">uartRead</a> from serial_uart.o(i.uartRead) referenced from serial_uart.o(.constdata)
 <LI><a href="#[6d]">uartSetBaudRate</a> from serial_uart.o(i.uartSetBaudRate) referenced from serial_uart.o(.constdata)
 <LI><a href="#[6f]">uartSetMode</a> from serial_uart.o(i.uartSetMode) referenced from serial_uart.o(.constdata)
 <LI><a href="#[6a]">uartTotalRxBytesWaiting</a> from serial_uart.o(i.uartTotalRxBytesWaiting) referenced from serial_uart.o(.constdata)
 <LI><a href="#[6b]">uartTotalTxBytesFree</a> from serial_uart.o(i.uartTotalTxBytesFree) referenced from serial_uart.o(.constdata)
 <LI><a href="#[69]">uartWrite</a> from serial_uart.o(i.uartWrite) referenced from serial_uart.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[70]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[73]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19c]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[19d]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[19e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[74]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[89]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[76]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[77]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[19f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[79]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1b4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1b5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1b6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1b8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[72]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rxSerial3TestInit &rArr; openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[82]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1be]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[84]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[86]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[88]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[97]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[75]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueRemove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueAdd
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1c3]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIInit
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSerialConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[8f]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[8e]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueClear
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[91]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[1c7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[95]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[8a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[98]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[78]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[87]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1ca]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9a]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1cc]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1cd]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[81]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[85]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1ce]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[1d0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[f3]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[f9]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[f8]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[f6]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[f7]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[fb]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[f5]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[1f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA1_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA1_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA1_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA1_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA1_Stream4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA1_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA1_Stream6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA1_Stream7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA2_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA2_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA2_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA2_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA2_Stream4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA2_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA2_Stream6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.DMA2_Stream7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartTxDMA
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[ef]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[17c]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[17d]"></a>DMA_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[f1]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[182]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_MemoryTargetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartTxDMA
</UL>

<P><STRONG><a name="[17e]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[f0]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI3_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>EXTIInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = EXTIInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>EXTI_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, exti.o(i.EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>EnableGPIOClk</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i.EnableGPIOClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EnableGPIOClk &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
</UL>

<P><STRONG><a name="[a8]"></a>IOConfigGPIO</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, io.o(i.IOConfigGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPortIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSwitchBtnPollInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
</UL>

<P><STRONG><a name="[ab]"></a>IOConfigGPIOAF</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, io.o(i.IOConfigGPIOAF))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIO_PinSource
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPortIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>

<P><STRONG><a name="[b1]"></a>IOGetByTag</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, io.o(i.IOGetByTag))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSwitchBtnPollInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
</UL>

<P><STRONG><a name="[139]"></a>IOGlobalInit</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, io.o(i.IOGlobalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOGlobalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>IOHi</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io.o(i.IOHi))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
</UL>

<P><STRONG><a name="[b2]"></a>IOInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, io.o(i.IOInit))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSwitchBtnPollInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>

<P><STRONG><a name="[b8]"></a>IOLo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, io.o(i.IOLo))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
</UL>

<P><STRONG><a name="[b3]"></a>IOWrite</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, io.o(i.IOWrite))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemBeep
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
</UL>

<P><STRONG><a name="[ae]"></a>IO_GPIOPinIdx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, io.o(i.IO_GPIOPinIdx))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIO_PinSource
</UL>

<P><STRONG><a name="[a9]"></a>IO_GPIOPortIdx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, io.o(i.IO_GPIOPortIdx))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
</UL>

<P><STRONG><a name="[ac]"></a>IO_GPIO_PinSource</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io.o(i.IO_GPIO_PinSource))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIOPinIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
</UL>

<P><STRONG><a name="[167]"></a>Incremental_PIController</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fc_tasks.o(i.Incremental_PIController))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[af]"></a>LedInit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, led.o(i.LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LedInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>LedSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led.o(i.LedSet))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[159]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>

<P><STRONG><a name="[15f]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[b4]"></a>OLED_Clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
</UL>

<P><STRONG><a name="[b5]"></a>OLED_Refresh_Gram</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh_Gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[b6]"></a>OLED_WR_Byte</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>

<P><STRONG><a name="[a3]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaInit
</UL>

<P><STRONG><a name="[ba]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
</UL>

<P><STRONG><a name="[a4]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
</UL>

<P><STRONG><a name="[a5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
</UL>

<P><STRONG><a name="[bc]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
</UL>

<P><STRONG><a name="[a0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
</UL>

<P><STRONG><a name="[bb]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
</UL>

<P><STRONG><a name="[160]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[aa]"></a>RCC_ClockCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rcc.o(i.RCC_ClockCmd))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>

<P><STRONG><a name="[c0]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[b9]"></a>RCC_ResetCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rcc.o(i.RCC_ResetCmd))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>

<P><STRONG><a name="[166]"></a>Read_Encoder</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fc_tasks.o(i.Read_Encoder))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[113]"></a>ResetBeeperConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(i.ResetBeeperConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[112]"></a>ResetLedStatusConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, config.o(i.ResetLedStatusConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[110]"></a>ResetRollAndPitchTrims</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, acceleration.o(i.ResetRollAndPitchTrims))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[bd]"></a>ResetSerialConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, config.o(i.ResetSerialConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ResetSerialConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[111]"></a>ResetSerialPinConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, config.o(i.ResetSerialPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ResetSerialPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[15e]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>

<P><STRONG><a name="[be]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>

<P><STRONG><a name="[15d]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>

<P><STRONG><a name="[c1]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SysTick_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_CC_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; timCCxHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timCCxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[11a]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[c3]"></a>TIM_ICInit</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderICConfig
</UL>

<P><STRONG><a name="[14d]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ICStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderICConfig
</UL>

<P><STRONG><a name="[16f]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
</UL>

<P><STRONG><a name="[173]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
</UL>

<P><STRONG><a name="[170]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
</UL>

<P><STRONG><a name="[174]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
</UL>

<P><STRONG><a name="[171]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
</UL>

<P><STRONG><a name="[175]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
</UL>

<P><STRONG><a name="[16e]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
</UL>

<P><STRONG><a name="[172]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
</UL>

<P><STRONG><a name="[117]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[14e]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
</UL>

<P><STRONG><a name="[c6]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c8]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c9]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c4]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[10a]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimeBase4Encoder
</UL>

<P><STRONG><a name="[109]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimeBase4Encoder
</UL>

<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; uartIrqHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART6_IRQHandler &rArr; uartIrqHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[17f]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[17b]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[176]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>

<P><STRONG><a name="[180]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_HalfDuplexCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>

<P><STRONG><a name="[178]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[cb]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>

<P><STRONG><a name="[177]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIrqHandler
</UL>

<P><STRONG><a name="[d1]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[cc]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuUpdateEulerAngles
</UL>

<P><STRONG><a name="[d0]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuUpdateEulerAngles
</UL>

<P><STRONG><a name="[d4]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInit
</UL>

<P><STRONG><a name="[d6]"></a>__hardfp_lrintf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lrintf.o(i.__hardfp_lrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuUpdateEulerAngles
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignBoard
</UL>

<P><STRONG><a name="[d9]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_round &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[df]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInit
</UL>

<P><STRONG><a name="[e0]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandardDeviation
</UL>

<P><STRONG><a name="[ce]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[d3]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[cf]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[d2]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[d5]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[144]"></a>accSetCalibrationCycles</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, acceleration.o(i.accSetCalibrationCycles))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>accUpdate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, acceleration.o(i.accUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = accUpdate &rArr; alignSensors &rArr; alignBoard &rArr; __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterApply
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAccelerationCalibrationComplete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performAccelerationCalibration
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpdateAccelerometer
</UL>

<P><STRONG><a name="[e6]"></a>activateConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, config.o(i.activateConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = activateConfig &rArr; setAccelerationFilter &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAccelerationTrims
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAccelerationFilter
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
</UL>

<P><STRONG><a name="[ec]"></a>adcChannelByTag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc.o(i.adcChannelByTag))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[eb]"></a>adcDeviceByInstance</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc_stm32f4xx.o(i.adcDeviceByInstance))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[184]"></a>adcGetChannelSample</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.adcGetChannelSample))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019RightMotorCurrentSensor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019LeftMotorCurrentSensor
</UL>

<P><STRONG><a name="[ea]"></a>adcInit</STRONG> (Thumb, 406 bytes, Stack size 176 bytes, adc_stm32f4xx.o(i.adcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = adcInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonStructInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaGetIdentifier
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDeviceByInstance
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcChannelByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>alignSensors</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, boardalignment.o(i.alignSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alignSensors &rArr; alignBoard &rArr; __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignBoard
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>

<P><STRONG><a name="[fd]"></a>beeperInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sound_beeper.o(i.beeperInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = beeperInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemBeep
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>biquadFilterApply</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, filter.o(i.biquadFilterApply))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019RightMotorCurrentSensor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019LeftMotorCurrentSensor
</UL>

<P><STRONG><a name="[ff]"></a>biquadFilterInit</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, filter.o(i.biquadFilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
</UL>

<P><STRONG><a name="[100]"></a>biquadFilterInitLPF</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, filter.o(i.biquadFilterInitLPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAccelerationFilter
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019RightMotorCurrentSensor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019LeftMotorCurrentSensor
</UL>

<P><STRONG><a name="[101]"></a>bluetoothSerial6Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bluetoothserial6.o(i.bluetoothSerial6Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = bluetoothSerial6Init &rArr; openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSerialPort
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>bluetoothSerial6Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluetoothserial6.o(i.bluetoothSerial6Write))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[131]"></a>calculateAccZLowPassFilterRCTimeConstant</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, imu.o(i.calculateAccZLowPassFilterRCTimeConstant))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuConfigure
</UL>

<P><STRONG><a name="[132]"></a>calculateThrottleAngleScale</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, imu.o(i.calculateThrottleAngleScale))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuConfigure
</UL>

<P><STRONG><a name="[106]"></a>checkEEPROMContainsValidData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config.o(i.checkEEPROMContainsValidData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = checkEEPROMContainsValidData &rArr; resetEEPROM &rArr; createDefaultConfig &rArr; targetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>configTimeBase4Encoder</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, timer.o(i.configTimeBase4Encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = configTimeBase4Encoder &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[10b]"></a>cosApprox</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, maths.o(i.cosApprox))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinApprox
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
</UL>

<P><STRONG><a name="[10d]"></a>createDefaultConfig</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, config.o(i.createDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = createDefaultConfig &rArr; targetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intFeatureSet
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intFeatureClearAll
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRollAndPitchTrims
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetConfiguration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSerialPinConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSerialConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLedStatusConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetBeeperConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEEPROM
</UL>

<P><STRONG><a name="[115]"></a>dcBrushedMotorInit</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, pwm_output.o(i.dcBrushedMotorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dcBrushedMotorInit &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCPreloadConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerOCInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerGetByTag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChCCR
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimeBase4Encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>degreesToRadians</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, maths.o(i.degreesToRadians))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
</UL>

<P><STRONG><a name="[11d]"></a>delay</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, system.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay &rArr; delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>delayMicroseconds</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, system.o(i.delayMicroseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delayMicroseconds &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[149]"></a>devClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maths.o(i.devClear))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[14a]"></a>devPush</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, maths.o(i.devPush))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[120]"></a>devStandardDeviation</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, maths.o(i.devStandardDeviation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = devStandardDeviation &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devVariance
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[121]"></a>devVariance</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, maths.o(i.devVariance))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandardDeviation
</UL>

<P><STRONG><a name="[ed]"></a>dmaGetIdentifier</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dma_stm32f4xx.o(i.dmaGetIdentifier))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[ee]"></a>dmaInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dma_stm32f4xx.o(i.dmaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmaInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[122]"></a>fcTasksInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fc_tasks.o(i.fcTasksInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fcTasksInit &rArr; schedulerInit &rArr; queueAdd &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTaskEnabled
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedulerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>feature</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, feature.o(i.feature))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRightMotorCurrentMeter
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLeftMotorCurrentMeter
</UL>

<P><STRONG><a name="[188]"></a>featureClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, feature.o(i.featureClear))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
</UL>

<P><STRONG><a name="[186]"></a>featureConfigured</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, feature.o(i.featureConfigured))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
</UL>

<P><STRONG><a name="[187]"></a>featureSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, feature.o(i.featureSet))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
</UL>

<P><STRONG><a name="[125]"></a>findNextSerialPortConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial.o(i.findNextSerialPortConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = findNextSerialPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortConfig
</UL>

<P><STRONG><a name="[102]"></a>findSerialPortConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(i.findSerialPortConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = findSerialPortConfig &rArr; findNextSerialPortConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNextSerialPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxSerial3TestInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSerial6Init
</UL>

<P><STRONG><a name="[161]"></a>findSerialPortIndexByIdentifier</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial.o(i.findSerialPortIndexByIdentifier))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetConfiguration
</UL>

<P><STRONG><a name="[147]"></a>findSerialPortUsageByIdentifier</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial.o(i.findSerialPortUsageByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = findSerialPortUsageByIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSerialPort
</UL>

<P><STRONG><a name="[67]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSerial6Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>gyroSetCalibrationCycles</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gyro.o(i.gyroSetCalibrationCycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gyroSetCalibrationCycles
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroCalculateCalibratingCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[128]"></a>gyroUpdate</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, gyro.o(i.gyroUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gyroUpdate &rArr; performGyroCalibration &rArr; devStandardDeviation &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyroCalibrationComplete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskUpdateGyro
</UL>

<P><STRONG><a name="[e9]"></a>imuConfigure</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, imu.o(i.imuConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imuConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateThrottleAngleScale
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateAccZLowPassFilterRCTimeConstant
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateConfig
</UL>

<P><STRONG><a name="[133]"></a>imuInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, imu.o(i.imuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imuInit
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degreesToRadians
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosApprox
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>initEEPROM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, config_eeprom.o(i.initEEPROM))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>intFeatureClearAll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, feature.o(i.intFeatureClearAll))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[10f]"></a>intFeatureSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feature.o(i.intFeatureSet))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[e4]"></a>isAccelerationCalibrationComplete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, acceleration.o(i.isAccelerationCalibrationComplete))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>

<P><STRONG><a name="[12c]"></a>isGyroCalibrationComplete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gyro.o(i.isGyroCalibrationComplete))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[6e]"></a>isUartTransmitBufferEmpty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_uart.o(i.isUartTransmitBufferEmpty))
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>latchActiveFeatures</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, feature.o(i.latchActiveFeatures))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>limitMotorPwm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fc_tasks.o(i.limitMotorPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = limitMotorPwm
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = main &rArr; rxSerial3TestInit &rArr; openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemBeep
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxSerial3TestInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSwitchBtnPollInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latchActiveFeatures
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEPROM
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetCalibrationCycles
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcTasksInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkEEPROMContainsValidData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSerial6Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accSetCalibrationCycles
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGlobalInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11f]"></a>micros</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, system.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microsISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
</UL>

<P><STRONG><a name="[146]"></a>microsISR</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system.o(i.microsISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = microsISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>

<P><STRONG><a name="[137]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
</UL>

<P><STRONG><a name="[13f]"></a>modeSwitchBtnPollInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, button.o(i.modeSwitchBtnPollInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = modeSwitchBtnPollInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>oledInit</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, oled.o(i.oledInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = oledInit &rArr; IOConfigGPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>openSerialPort</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, serial.o(i.openSerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortUsageByIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxSerial3TestInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSerial6Init
</UL>

<P><STRONG><a name="[14c]"></a>pwmEncoderICConfig</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rx_pwm.o(i.pwmEncoderICConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pwmEncoderICConfig &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
</UL>

<P><STRONG><a name="[141]"></a>pwmEncoderInit</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, rx_pwm.o(i.pwmEncoderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pwmEncoderInit &rArr; pwmEncoderICConfig &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderICConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerGetByTag
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimeBase4Encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>pwmWriteDcBrushedMotor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm_output.o(i.pwmWriteDcBrushedMotor))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
</UL>

<P><STRONG><a name="[14f]"></a>queueAdd</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, scheduler.o(i.queueAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queueAdd &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueContains
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTaskEnabled
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedulerInit
</UL>

<P><STRONG><a name="[152]"></a>queueClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scheduler.o(i.queueClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = queueClear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedulerInit
</UL>

<P><STRONG><a name="[150]"></a>queueContains</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scheduler.o(i.queueContains))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queueContains
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueAdd
</UL>

<P><STRONG><a name="[156]"></a>queueFirst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(i.queueFirst))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
</UL>

<P><STRONG><a name="[157]"></a>queueNext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scheduler.o(i.queueNext))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler
</UL>

<P><STRONG><a name="[153]"></a>queueRemove</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, scheduler.o(i.queueRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queueRemove &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTaskEnabled
</UL>

<P><STRONG><a name="[13d]"></a>readEEPROM</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, config_eeprom.o(i.readEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = readEEPROM &rArr; activateConfig &rArr; setAccelerationFilter &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProfile
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>resetEEPROM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config.o(i.resetEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = resetEEPROM &rArr; createDefaultConfig &rArr; targetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProfile
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkEEPROMContainsValidData
</UL>

<P><STRONG><a name="[13c]"></a>rxSerial3TestInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rxserial3test.o(i.rxSerial3TestInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rxSerial3TestInit &rArr; openSerialPort &rArr; uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSerialPort
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>scheduler</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, scheduler.o(i.scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = scheduler &rArr; micros &rArr; microsISR
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueNext
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>schedulerInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scheduler.o(i.schedulerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = schedulerInit &rArr; queueAdd &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueClear
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcTasksInit
</UL>

<P><STRONG><a name="[163]"></a>sensors</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, runtime_config.o(i.sensors))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskIMUUpdateAttitude
</UL>

<P><STRONG><a name="[13b]"></a>serialInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(i.serialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serialInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>serialUART</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, serial_uart_stm32f4xx.o(i.serialUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART6
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART3
</UL>

<P><STRONG><a name="[15a]"></a>serialUART3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.serialUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serialUART3 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[15b]"></a>serialUART6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_uart_stm32f4xx.o(i.serialUART6))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[105]"></a>serialWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(i.serialWrite))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSerial6Write
</UL>

<P><STRONG><a name="[e8]"></a>setAccelerationFilter</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, acceleration.o(i.setAccelerationFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = setAccelerationFilter &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateConfig
</UL>

<P><STRONG><a name="[e7]"></a>setAccelerationTrims</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, acceleration.o(i.setAccelerationTrims))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activateConfig
</UL>

<P><STRONG><a name="[154]"></a>setProfile</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, config.o(i.setProfile))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEEPROM
</UL>

<P><STRONG><a name="[124]"></a>setTaskEnabled</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, scheduler.o(i.setTaskEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setTaskEnabled &rArr; queueAdd &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueRemove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcTasksInit
</UL>

<P><STRONG><a name="[10c]"></a>sinApprox</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, maths.o(i.sinApprox))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosApprox
</UL>

<P><STRONG><a name="[142]"></a>spiInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bus_spi.o(i.spiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = spiInit &rArr; spiInitDevice &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>spiInitDevice</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, bus_spi.o(i.spiInitDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = spiInitDevice &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>

<P><STRONG><a name="[cd]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[fe]"></a>systemBeep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sound_beeper.o(i.systemBeep))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeperInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>systemInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.systemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = systemInit &rArr; EnableGPIOClk &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOClk
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>targetConfiguration</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, config.o(i.targetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = targetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findSerialPortIndexByIdentifier
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDefaultConfig
</UL>

<P><STRONG><a name="[6]"></a>taskIMUUpdateAttitude</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, imu.o(i.taskIMUUpdateAttitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = taskIMUUpdateAttitude &rArr; imuCalculateEstimatedAttitude &rArr; imuMahonyAHRSUpdate &rArr; invSqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuCalculateEstimatedAttitude
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>taskSystem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, scheduler.o(i.taskSystem))
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>timerChCCR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.timerChCCR))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[116]"></a>timerGetByTag</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, timer.o(i.timerGetByTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timerGetByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEncoderInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[140]"></a>timerInit</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timer.o(i.timerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = timerInit &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOConfigGPIOAF
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerRCC
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>timerOCInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer.o(i.timerOCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerOCInit &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[119]"></a>timerOCPreloadConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer.o(i.timerOCPreloadConfig))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcBrushedMotorInit
</UL>

<P><STRONG><a name="[16d]"></a>timerRCC</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.timerRCC))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[ca]"></a>uartIrqHandler</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, serial_uart_stm32f4xx.o(i.uartIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uartIrqHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>uartOpen</STRONG> (Thumb, 342 bytes, Stack size 88 bytes, serial_uart.o(i.uartOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = uartOpen &rArr; serialUART6 &rArr; serialUART &rArr; IOConfigGPIOAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART6
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialUART3
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSerialPort
</UL>

<P><STRONG><a name="[6c]"></a>uartRead</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, serial_uart.o(i.uartRead))
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>uartSetBaudRate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_uart.o(i.uartSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartSetBaudRate &rArr; uartReconfigure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>uartSetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_uart.o(i.uartSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartSetMode &rArr; uartReconfigure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartReconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>uartStartTxDMA</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, serial_uart.o(i.uartStartTxDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartStartTxDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MemoryTargetConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>

<P><STRONG><a name="[6a]"></a>uartTotalRxBytesWaiting</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial_uart.o(i.uartTotalRxBytesWaiting))
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>uartTotalTxBytesFree</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial_uart.o(i.uartTotalTxBytesFree))
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>uartWrite</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, serial_uart.o(i.uartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartWrite &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartTxDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_uart.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>updateMotorPwm</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fc_tasks.o(i.updateMotorPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = updateMotorPwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOLo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOHi
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOGetByTag
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWriteDcBrushedMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[165]"></a>updateVNH5019LeftMotorCurrentSensor</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vnh5019currentsensing.o(i.updateVNH5019LeftMotorCurrentSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = updateVNH5019LeftMotorCurrentSensor &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterApply
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertADCCountToMilliAmps
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetChannelSample
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskLeftMotorCurrentMeter
</UL>

<P><STRONG><a name="[16c]"></a>updateVNH5019RightMotorCurrentSensor</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vnh5019currentsensing.o(i.updateVNH5019RightMotorCurrentSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = updateVNH5019RightMotorCurrentSensor &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterInitLPF
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biquadFilterApply
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertADCCountToMilliAmps
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetChannelSample
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskRightMotorCurrentMeter
</UL>

<P><STRONG><a name="[155]"></a>validateAndFixConfig</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, config.o(i.validateAndFixConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validateAndFixConfig &rArr; validateAndFixGyroConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureSet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureConfigured
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureClear
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixGyroConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
</UL>

<P><STRONG><a name="[189]"></a>validateAndFixGyroConfig</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, config.o(i.validateAndFixGyroConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validateAndFixGyroConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixConfig
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[18a]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[18d]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[193]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[190]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[191]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[1d1]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[192]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[195]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[18c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[18f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[194]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[da]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[196]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMotorEncoder
</UL>

<P><STRONG><a name="[198]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[d7]"></a>_ffix_r</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffixr))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>

<P><STRONG><a name="[199]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[7a]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1d2]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1d3]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[18b]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[d8]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c5]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c7]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[17a]"></a>uartReconfigure</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, serial_uart.o(i.uartReconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartReconfigure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSetMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSetBaudRate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
</UL>

<P><STRONG><a name="[c2]"></a>timCCxHandler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, timer.o(i.timCCxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timCCxHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>convertADCCountToMilliAmps</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, vnh5019currentsensing.o(i.convertADCCountToMilliAmps))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019RightMotorCurrentSensor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019LeftMotorCurrentSensor
</UL>

<P><STRONG><a name="[162]"></a>constrain</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, config.o(i.constrain))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndFixGyroConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetConfiguration
</UL>

<P><STRONG><a name="[8]"></a>taskLeftMotorCurrentMeter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fc_tasks.o(i.taskLeftMotorCurrentMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = taskLeftMotorCurrentMeter &rArr; updateVNH5019LeftMotorCurrentSensor &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019LeftMotorCurrentSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>taskMotorEncoder</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fc_tasks.o(i.taskMotorEncoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = taskMotorEncoder &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorPwm
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limitMotorPwm
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Encoder
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Incremental_PIController
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>taskRightMotorCurrentMeter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fc_tasks.o(i.taskRightMotorCurrentMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = taskRightMotorCurrentMeter &rArr; updateVNH5019RightMotorCurrentSensor &rArr; biquadFilterInitLPF &rArr; biquadFilterInit &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVNH5019RightMotorCurrentSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>taskUpdateAccelerometer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fc_tasks.o(i.taskUpdateAccelerometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = taskUpdateAccelerometer &rArr; accUpdate &rArr; alignSensors &rArr; alignBoard &rArr; __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>taskUpdateGyro</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fc_tasks.o(i.taskUpdateGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = taskUpdateGyro &rArr; gyroUpdate &rArr; performGyroCalibration &rArr; devStandardDeviation &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fc_tasks.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>imuCalculateEstimatedAttitude</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, imu.o(i.imuCalculateEstimatedAttitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = imuCalculateEstimatedAttitude &rArr; imuMahonyAHRSUpdate &rArr; invSqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuUpdateEulerAngles
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskIMUUpdateAttitude
</UL>

<P><STRONG><a name="[135]"></a>imuComputeRotationMatrix</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, imu.o(i.imuComputeRotationMatrix))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
</UL>

<P><STRONG><a name="[12f]"></a>imuMahonyAHRSUpdate</STRONG> (Thumb, 666 bytes, Stack size 88 bytes, imu.o(i.imuMahonyAHRSUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = imuMahonyAHRSUpdate &rArr; invSqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuCalculateEstimatedAttitude
</UL>

<P><STRONG><a name="[130]"></a>imuUpdateEulerAngles</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, imu.o(i.imuUpdateEulerAngles))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = imuUpdateEulerAngles &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuCalculateEstimatedAttitude
</UL>

<P><STRONG><a name="[136]"></a>invSqrt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, imu.o(i.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = invSqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuMahonyAHRSUpdate
</UL>

<P><STRONG><a name="[e5]"></a>performAccelerationCalibration</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, acceleration.o(i.performAccelerationCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = performAccelerationCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accUpdate
</UL>

<P><STRONG><a name="[127]"></a>gyroCalculateCalibratingCycles</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gyro.o(i.gyroCalculateCalibratingCycles))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetCalibrationCycles
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[14b]"></a>isOnFinalGyroCalibrationCycle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gyro.o(i.isOnFinalGyroCalibrationCycle))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performGyroCalibration
</UL>

<P><STRONG><a name="[12d]"></a>performGyroCalibration</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, gyro.o(i.performGyroCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = performGyroCalibration &rArr; devStandardDeviation &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetCalibrationCycles
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandardDeviation
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devPush
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devClear
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isOnFinalGyroCalibrationCycle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroCalculateCalibratingCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroUpdate
</UL>

<P><STRONG><a name="[fc]"></a>alignBoard</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, boardalignment.o(i.alignBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = alignBoard &rArr; __hardfp_lrintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
</UL>

<P><STRONG><a name="[197]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[18e]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[68]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
